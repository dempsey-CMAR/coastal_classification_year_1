---
format: 
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = FALSE, dpi = 600, fig.width = 8)

library(dplyr)
library(DT)
library(here)
library(ggplot2)
library(lubridate)
library(plotly)
library(readr)
library(sensorstrings)
library(tgc)
library(tidyr)
library(viridis)

source(here("functions/subchunkify.R"))
source(here("functions/merge_stations.R"))

standard_depth <- 5

theme_set(theme_light())

dt_options <- list(
  dom = 'Bft',
  paging = FALSE,
  searching = TRUE,
  scrollY = "500px",
  scrollX = "500px",
  columnDefs = list(list(className = 'dt-center', targets = "_all")),
  buttons = c('copy', 'csv')
)

dat <- readRDS(here("data/2023_cmp_temperature_standard_depths.rds")) %>% 
  dplyr::filter(sensor_depth_at_low_tide_m == standard_depth) %>% 
  mutate(
    heat_stress = temperature_degree_c >= 18,
    year_utc = year(timestamp_utc), 
    month_utc = month(timestamp_utc)
  ) 

# heat stress events for unfiltered (e.g., not time-standardized) data
prelim_heat_stress <- readRDS(
  here("data/heat_stress_events_18deg_24hrs_not_filtered_standard_depths.rds")
) %>% 
  dplyr::filter(sensor_depth_at_low_tide_m == standard_depth) 

get_depth_col_palette <- colorRampPalette(viridis(8, option = "D", direction = -1))
depth_pal <- get_depth_col_palette(length(unique(dat$sensor_depth_at_low_tide_m)))

year_pal <- viridis(length(unique(dat$year_utc)), option = "C")

# red rectangle for figures
hs_threshold <- annotate(
  "rect",
  xmin = as_datetime(-Inf), xmax = as_datetime(Inf),
  ymin = 18,  ymax = Inf, 
  fill = "#FB9A99", alpha = 0.25
)

```

# SALMON HEAT STRESS TEMPERATURE OVERVIEW: `r standard_depth` m

`r Sys.Date()`

- Data submitted to the Open Data Portal in March 2024.
- Automated and human in the loop quality control applied.
  - Observations flagged [Fail]{style="color: #DB4325;"} were excluded from the analysis.
- Fresh water stations not considered.
  - Piper Lake, Hourglass Lake, and Sissiboo
- Only considering depths of `r standard_depth` m (some depths were rounded or modified to make consistent data series).
- Re-named stations were merged into the same station.
- High temperatures are any observation >= 18 degrees C.
- Heat stress occurs for 24 hours after any observation >= 18 degrees C.

# Methods

1. Identify "potential heat stress months", i.e., the month(s) when high temperatures are typically observed.
2. Filter in data from the potential heat stress months.
3. Review excluded data series.
4. Review data gaps.
5. Export filtered data and heat stress events.

# Analysis

## 1. Potential Heat Stress Months

### High Temperatures

Identify the month(s) when high temperatures are typically observed.

::: panel-tabset

### Figure 1
```{r}
#| fig-height: 6
#| fig-cap: Number of high temperature observations each month.

p <- dat %>% 
  filter(heat_stress == TRUE) %>% 
  mutate(year_utc = factor(year_utc)) %>% 
  ggplot(aes(month_utc, fill = year_utc)) +
  geom_histogram(binwidth = 1) +
  scale_x_continuous(
    "Month", breaks = seq(1, 12), limits = c(1, 12),
    labels = month(seq(1, 12), label = TRUE)
  ) +
  scale_y_continuous("Count") +
  scale_fill_manual("Year", values = year_pal)

ggplotly(p)
```


### Table 1
Number and percent of high temperature observations each month.
```{r}
#| tbl-cap: Number and percent of high temperature observations each month.
dat %>% 
  filter(heat_stress == TRUE) %>% 
  group_by(month_utc) %>% 
  summarise(n = n()) %>% 
  ungroup() %>% 
  mutate(
    month = month(month_utc, label = TRUE),
    n_total = sum(n), 
    n_percent = round(100 * n / n_total, digits = 2),
  ) %>% 
  select(month, n, n_percent) %>% 
  datatable(options = list(
    dom = 'Bft',
    searching = FALSE,
    paging = FALSE,
    columnDefs = list(list(className = 'dt-center', targets = "_all")),
    buttons = c('copy', 'csv')
  ), rownames = FALSE)
```
:::

Most high temperature observations occur in July, August, and September.

### Duration of Heat Stress Events

Identify the month(s) when heat stress is typically observed.

### Figure 2
```{r}
#| fig-height: 6
#| fig-cap: Duration of heat stress events each month by year.
#| message: false

p <- prelim_heat_stress %>% 
  filter(!is.na(month_utc)) %>% 
  mutate(month_utc = month(month_utc, label = TRUE)) %>% 
  group_by(month_utc, year_utc) %>% 
  summarise(event_duration_days = sum(event_duration_days)) %>% 
  ungroup() %>% 
  ggplot(aes(month_utc, event_duration_days, fill = year_utc)) +
  geom_col(color = NA) +
  scale_y_continuous("Event Duration (days)") +
  scale_x_discrete("Month") +
  scale_fill_manual("Year", values = year_pal) 

ggplotly(p) 
```


Most heat stress occurs in June, July, August, and September.

## 2. Filter Data

- Filter in data series with observations recorded during the potential heat stress months (Table 2).
- For each data series, record the minimum and maximum timestamps (Table 2).
- Keep all data series that begin June 1 and end September 30 (Table 3).
  - These data series will be checked for data gaps below.
- Don't automatically keep any data series with heat stress because it's not just presence/absence like superchill - duration matters.
- Review the excluded data series to see if any can be included (i.e., only missing a few days of data in June or September).

```{r}
#| message: false

potential_heat_stress_months <- c(6:9)

# min and max month and day for each station and year
dat_hs_months <- dat %>% 
  filter(month_utc %in% potential_heat_stress_months) %>% 
  group_by(county, station, year_utc, sensor_depth_at_low_tide_m) %>% 
  mutate(
    min_timestamp_utc = min(timestamp_utc), 
    max_timestamp_utc = max(timestamp_utc),
    
    month_utc_min = month(min_timestamp_utc),
    day_min = day(min_timestamp_utc),
    month_utc_max = month(max_timestamp_utc),
    day_max = day(max_timestamp_utc)
  ) %>% 
  ungroup() 

# station-year-depth data series with data in June, July, August, or September
table1 <- dat_hs_months %>% 
  distinct(
    county, station, year_utc, sensor_depth_at_low_tide_m,
    min_timestamp_utc, max_timestamp_utc, 
    month_utc_min, day_min, month_utc_max, day_max 
  )

# station-year-depth data series with data starting in June and ending in September
table2 <- dat_hs_months %>% 
  filter(month_utc_min == 6, day_min == 1, month_utc_max == 9, day_max == 30) %>% 
  distinct(
    county, station, year_utc, sensor_depth_at_low_tide_m,
    min_timestamp_utc, max_timestamp_utc, 
    month_utc_min, day_min, month_utc_max, day_max
  )

# data series that may not be included in the analysis
excluded <- table1 %>%
  anti_join(
    table2,
    by = join_by(
      county, station, year_utc, 
      sensor_depth_at_low_tide_m,
      min_timestamp_utc, max_timestamp_utc, 
      month_utc_min, day_min, month_utc_max, day_max)
  )

# consider data series that are missing few days at beginning of June or end of Sept 
consider <- excluded %>% 
  mutate(
    time_span_days = difftime(max_timestamp_utc, min_timestamp_utc, units = "days"),
    time_span_days = round(unclass(time_span_days))
  ) %>% 
  filter(month_utc_min == 6, month_utc_max == 9, time_span_days >= 100) %>% 
  select(
    -c(min_timestamp_utc, max_timestamp_utc, month_utc_min, month_utc_max)
  )

```

::: panel-tabset 

### Table 2

`r nrow(table1)` data series with observations in June, July, August, and/or September.

```{r}
#| message: false
table1 %>% 
  mutate(
    min_timestamp_utc = as.character(min_timestamp_utc), 
    max_timestamp_utc = as.character(max_timestamp_utc)
  ) %>% 
  arrange(county, station, year_utc) %>% 
  select(-sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

### Table 3

`r nrow(table2)` data series with observations beginning June 1 and ending September 30.
```{r}
#| message: false
table2 %>% 
  mutate(
    min_timestamp_utc = as.character(min_timestamp_utc), 
    max_timestamp_utc = as.character(max_timestamp_utc)
  ) %>%
  arrange(county, station, year_utc) %>% 
  select(-sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

### Table 4

`r nrow(excluded)` data series do not include data for the beginning of June and end of September.
```{r}
#| message: false
excluded %>%
  mutate(
    min_timestamp_utc = as_date(min_timestamp_utc),
    max_timestamp_utc = as_date(max_timestamp_utc)
  ) %>%
  arrange(county, station, year_utc) %>% 
  select(-sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

### Table 5

`r nrow(consider)` data series from Table 4 have at least 100 days of data, with partial data in June or September. Consider including these in the analysis.
```{r}
#| message: false
consider %>% 
  select(-sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```
:::

## 3. Review Excluded Data Series

### 3.1 Consider Keeping

- Data series missing observations at the beginning of June and end of September, with a time span of at least 100 days (Table 5).

```{r}
#| results: "asis"
#| message: false
#| label: stations-consider

stations_consider <- consider %>% 
  distinct(station, year_utc)

dat_hs_months <- dat_hs_months %>% 
  select(
    county, station, timestamp_utc, year_utc, month_utc,
    sensor_type, sensor_serial_number,
    sensor_depth_at_low_tide_m, temperature_degree_c
  ) 

k <- "stations_consider"

for(i in seq_along(1:nrow(stations_consider))){

  station_i <- stations_consider[i, ]$station
  year_i <- stations_consider[i, ]$year_utc

  dat_i <- dat_hs_months %>%
    filter(station == station_i & year_utc == year_i)

  cat('\n####', paste(station_i, "-", year_i, '\n'))

  p <- ss_ggplot_variables(dat_i) +
    scale_y_continuous("", limits = c(0, 33)) +
    scale_x_datetime(
      limits = c(as_datetime(paste(year_i, "-06-01")),
                 as_datetime(paste(year_i, "-10-01")))
    ) +
    hs_threshold
  
   subchunkify(p, fig_height = 2, fig_width = 8.5, fig_i = paste(k, i, sep = "-"))
}
```

### 3.2 Data Series to Keep

- Time span of at least 100 days[^1].
- Mean temperature in June/September is < 15 degrees C.

[^1]: 122 days from June through September

#### Table 6

Stations with partial data in June or September that may still be included in the analysis.

```{r}
#| message: false

to_keep1 <- dat_hs_months %>% 
  inner_join(
    select(consider, -c(day_min, day_max)),
    by = join_by(county, station, year_utc, sensor_depth_at_low_tide_m)
  ) %>% 
  filter(time_span_days >= 100, month_utc %in% c(6, 9)) %>% 
  group_by(county, station, sensor_depth_at_low_tide_m, year_utc, month_utc) %>% 
  mutate(
    min_day_group = day(min(timestamp_utc)), # min day in June or Sept
    max_day_group = day(max(timestamp_utc))  # max day in June or Sept
  ) %>% 
  filter(
    !(month_utc == 6 & min_day_group == 1), # exclude series with data on June 1
    !(month_utc == 9 & max_day_group == 30) # exclude series with data on Sept 30
  ) %>% 
  summarise(
    mean_temperature = round(mean(temperature_degree_c), digits = 2),
    max_temperature = max(temperature_degree_c)
  ) %>% 
  ungroup() %>% 
  filter(mean_temperature < 15)

to_keep1 %>% 
  rename(depth_m = sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

### 3.3 Exclude

```{r}
#| results: "asis"
#| message: false
#| label: stations-exclude

stations_exclude <- excluded %>%
  anti_join(
    consider, by = join_by(county, station, year_utc, day_min, day_max)
  ) %>%
  distinct(station, year_utc)

k <- "stations_exclude"

for(i in seq_along(1:nrow(stations_exclude))) {

  station_i <- stations_exclude[i, ]$station
  year_i <- stations_exclude[i, ]$year_utc

  dat_i <- dat_hs_months %>%
    filter(station == station_i & year_utc == year_i)

  cat('\n####', paste(station_i, "-", year_i, '\n'))

  p <- ss_ggplot_variables(dat_i) +
    scale_y_continuous("", limits = c(0, 33)) +
    scale_x_datetime(
      limits = c(as_datetime(paste(year_i, "-06-01")),
                 as_datetime(paste(year_i, "-10-01")))
    ) +
    hs_threshold

  subchunkify(p, fig_height = 2, fig_width = 8.5, fig_i = paste(k, i, sep = "-"))
}
```

## 4. Data Gaps

Review data series to see if the data gaps would prevent heat stress from being identified for a given data series. 

### Table 7

Data series with data gaps. 
```{r}
#| message: false
#| warning: false

# all data series to include in analysis
to_keep <- to_keep1 %>% 
  select(county, station, sensor_depth_at_low_tide_m, year_utc) %>% 
  full_join(
    select(table2, county, station, sensor_depth_at_low_tide_m, year_utc),
    by = join_by(county, station, sensor_depth_at_low_tide_m, year_utc)
  ) 

# all data to include in analysis
dat_hs <- dat_hs_months %>%
  inner_join(
    to_keep, by = join_by(county, station, sensor_depth_at_low_tide_m, year_utc)
  ) %>% 
  select(
    county, station, timestamp_utc, year_utc,
    sensor_type, sensor_serial_number,
    sensor_depth_at_low_tide_m, temperature_degree_c
  ) 

gap_summary <- dat_hs %>% 
  rename(DEPTH = sensor_depth_at_low_tide_m, TIMESTAMP = timestamp_utc) %>%
  check_for_data_gaps(county, station, year_utc) %>% 
  rename(
    sensor_depth_at_low_tide_m = DEPTH,
    gap_start = GAP_START,
    gap_length_days = GAP_LENGTH_DAYS, 
    gap_length_hours = GAP_LENGTH_HOURS
  ) %>%  
  filter(gap_length_hours > 0) 

gap_summary %>% 
  mutate(gap_start = as.character(gap_start)) %>% 
  select(-gap_length_hours) %>% 
  rename(depth_m = sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```
</br>

Review data gaps > 1.5 days.

```{r}
#| results: "asis"
#| message: false
#| label: stations-gaps

stations_gap <- gap_summary %>%
  filter(gap_length_days > 1.5) %>% 
  distinct(station, year_utc)

k <- "stations_gap"

for(i in seq_along(1:nrow(stations_gap))) {
  
  station_i <- stations_gap[i, ]$station
  year_i <- stations_gap[i, ]$year_utc
  
  dat_i <- dat_hs %>%
    filter(station == station_i & year_utc == year_i) 
  
  cat('\n###', paste(station_i, "-", year_i, '\n'))
  
  gap_start <- filter(gap_summary, 
                      station == station_i, year_utc == year_i)$gap_start
  
  p <- ss_ggplot_variables(dat_i) +
    geom_vline(xintercept = gap_start) +
    scale_y_continuous("", limits = c(0, 33)) +
    hs_threshold
  
  subchunkify(p, fig_height = 2, fig_width = 8.5, fig_i = paste(k, i, sep = "-"))
}
```

### Table 8 

- Data series to remove due to data gaps (> 24 days).
- Data series with gaps < 24 days were reviewed to determine it was unlikely heat stress occurred during the gaps.

```{r}

exclude_gaps <- gap_summary %>% 
  filter(gap_length_days > 24) %>% 
  select(-c(gap_start, gap_length_hours))

exclude_gaps %>%
  rename(depth_m = sensor_depth_at_low_tide_m) %>% 
  datatable(options = dt_options, rownames = FALSE)
```

# Finalize & Export Heat Stress Events

#### Table 9
Heat stress events for each data series. Blank entries for month_utc, stress_start, and stress_end indicate that there was no heat stress for that data series.
```{r}

dat_out <- dat_hs %>% 
  anti_join(
    exclude_gaps,
    by = join_by(county, station, year_utc, sensor_depth_at_low_tide_m)
  ) 

# all of the data series in dat_out - not all have heat stress
data_series_out <- dat_out %>%
  distinct(county, station, year_utc, sensor_depth_at_low_tide_m)

# # heat stress events = obs > 18 degrees + 24 hours
# heat_stress_events <- dat_out %>% 
#   rename(
#     TIMESTAMP = timestamp_utc,
#     DEPTH = sensor_depth_at_low_tide_m,
#     VALUE = temperature_degree_c
#   ) %>%
#   identify_heat_stress_events(county, station) %>%
#   rename(sensor_depth_at_low_tide_m = DEPTH) %>% 
#   mutate(
#     year_utc = year(stress_start),
#     month_utc = month(stress_start),
#     event_duration_days = difftime(stress_end, stress_start, units = "days"),
#     event_duration_days = round(unclass(event_duration_days), digits = 2)
#   )
# 
# # add in data series with no heat stress
# heat_stress_events_out <- heat_stress_events %>% 
#   full_join(
#     data_series_out,
#     by = join_by(county, station, year_utc, sensor_depth_at_low_tide_m)
#   ) %>% 
#   mutate(
#     event_duration_days = if_else(
#       is.na(event_id) & is.na(event_duration_days), 0, event_duration_days)
#   ) %>% 
#   select(county, station, year_utc, month_utc, sensor_depth_at_low_tide_m,
#          event_id, stress_start, stress_end, event_duration_days) %>% 
#   arrange(county, station, year_utc, sensor_depth_at_low_tide_m)
# 
# saveRDS(
#   heat_stress_events_out,
#   file = here("data/heat_stress_events_18deg_24hrs_filtered_standard_depths.rds")
# )
# 
# heat_stress_events_out %>% 
#   mutate(
#     stress_start = as.character(stress_start), 
#     stress_end = as.character(stress_end)
#   ) %>% 
#   select(-event_id) %>% 
#   rename(depth_m = sensor_depth_at_low_tide_m) %>% 
#   datatable(options = dt_options, rownames = FALSE)
```

`r nrow(data_series_out)` data series to include in analysis.


---
title: "Coastal Inverse Path Distance Weighting: Example"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, dpi = 600, fig.width = 8)

library(gdata)
library(ggplot2)
library(ggthemes)
library(ipdw)
library(sf)
library(spatstat)
library(stars)

theme_map <- theme_map() +
  theme(
    legend.position = "right", 
    panel.border = element_rect(fill = NA, colour = 1)
  )
```

## Data Preparation

### Read in Data

Read in polygon (map) and points (station locations).

```{r}
pols <- st_read(system.file("extdata/kattegat_coast.gpkg", package = "ipdw"))
pnts <- st_read(system.file("extdata/kattegat_pnts.gpkg", package = "ipdw"))
```

```{r}
# side note: plot pols and points
ggplot() +
  geom_sf(data = pols) +
  geom_sf(data = pnts, aes(col = salinity)) +
  scale_colour_gradient(low = "#F7FCF5", high = "#00441B") + 
  theme_map
```

### Create Cost Raster 

- Use `pols` to create a cost raster defining travel through land areas with a very high cost. 
- Cost raster created with `ipdw::costrasterGen`. 
  - By default, open water areas are set to a per unit travel cost of 1 whereas land areas are set to a per unit travel cost of 10,000. 
- Check the resolution of the cost raster before proceeding. 
  - The resolution will determine the resolution of the interpolated output.
  - If resolution is too fine, this will result in very long processing times. 
    -  Can coarsen the cost raster with the `raster::aggregate`.

```{r}
costras <- costrasterGen(
  pnts, pols, extent = "pnts", projstr = projection(pols)
)

plot(costras) # plot raster

# insert contiguous barrier
costras[160:170, 1:80] <- 10000

plot(costras)

```

side note 2: access barrier data

```{r}
barrier <- costras@data@values
```

side note 3: convert to `stars` object and plot with `ggplot2`

```{r}
cost_stars <- st_as_stars(costras)

ggplot() + 
  geom_stars(data = cost_stars, aes(fill = factor(layer))) +
  scale_fill_manual(values = c("white", "forestgreen")) +
  theme_map +
  theme(aspect.ratio = 1)
```

### Create Grid for Training & Validation Data

- Split data into training and validation datasets.
- The training dataset is created in a spatially balanced manner by building a grid and randomly selecting one measurement point per grid cell. 
- Here, the size of the grid is defined as 2 times the average distance among measurement points. 
- Average distance is computed using the `spatstat` package (Baddeley and Turner 2005).
- Random selection is accomplished with the `gdata` function `resample` (Warnes et al. 2014). 
- Subsetting the full dataset is not required to run `ipdw`. Alternative means of estimating interpolation errors, such as leave-one-out cross validation, are in development.

```{r}
# find average nearest neighbor

# Creates an object of class "owin" representing an observation window in the two-dimensional plane
W <- owin(
  range(c(st_bbox(pnts)["xmin"], st_bbox(pnts)["xmax"])),
  range(c(st_bbox(pnts)["ymin"], st_bbox(pnts)["ymax"]))
)

# Creates an object of class "ppp" representing a point pattern dataset in the two-dimensional plane
kat.pp <- ppp(st_coordinates(pnts)[,1], st_coordinates(pnts)[,2], window = W)
mean.neighdist <- mean(nndist(kat.pp))

# grid building
gridsize <- mean.neighdist * 2 # mean distance between neighbors x 2
grainscale.fac <- gridsize / res(costras)[1] # gridsize / resolution
gridras <- aggregate(costras, fact = grainscale.fac) # create grid raster

plot(gridras)

gridpol <- rasterToPolygons(gridras)
gridpol$value  <- row.names(gridpol)

plot(gridpol)
```

### Create Training and Validation Datasets

- Save the training and validation datasets as objects of class `sf` with point geometries. 
- Note that the projection of the training and validation datasets matches the cost raster. 
- Calculations within the ipdw package require projected datasets. 

```{r}
# spatial join
fulldataset.over <- sf::st_join(pnts, st_as_sf(gridpol))

# grid selection - there might be more efficient ways to do this!
set.seed(2)
gridlev <- unique(fulldataset.over$value)

for (i in seq_along(gridlev)) {
  
  activesub <- subset(fulldataset.over, fulldataset.over$value == gridlev[i])
  selectnum <- gdata::resample(seq_len(nrow(activesub)), 1)
  
  if (i == 1) {
    training <- activesub[selectnum, ]
  } else {
    training <- rbind(training, activesub[selectnum, ])
  }
}

validate <- fulldataset.over[!(row.names(fulldataset.over) %in% row.names(training)), ]

plot(costras)
plot(st_geometry(training), add = TRUE)
plot(st_geometry(validate), col = "red", add = TRUE)

```

## Interpolation

- We have assembled an object of class sf with point geometries to be interpolated and an underlying cost raster of class Raster. 
- We can either proceed in a single step using `ipdw::ipdw` or in two steps using calls to the `pathdistGen` and `ipdwInterp` functions. 
- The single step option, `ipdw`, is shown below. 
- The two step option would be useful for the case where we want interpolate multiple parameters of the same sf object using a single RasterStack of path distances.

```{r}
paramlist <- c("salinity")

final.ipdw <- ipdw(
  training, costras, range = mean.neighdist * 10, paramlist, overlapped = TRUE
)

plot(final.ipdw, main = "Kattegat salinity (ppt)")
```

## Comparison to IDW

- We can evaluate the benefits of IPDW by comparing its output against Inverse Distance Weighting with Euclidean distances. 
- The following section generates an interpolated surface via IDW. 
  - First, prediction points are generated. 
  - Then the `gstat` IDW functionality is called with the same inputs as the previous section above. 


```{r}
idw.grid <- rasterToPoints(costras, fun = function(x) {
  x < 10000
}, spatial = FALSE)

idw.grid <- st_as_sf(
  data.frame(idw.grid), 
  coords = c("x", "y"), 
  crs = st_crs(training)
)

kat.idw  <- gstat::idw(
  salinity ~ 1, 
  training, 
  idw.grid, 
  maxdist = mean.neighdist * 10,
  debug.level = 0)["var1.pred"]

final.idw <- rasterize(as_Spatial(kat.idw), final.ipdw)
final.idw <- raster::subset(final.idw, "var1.pred")

par(mfrow = c(1, 3), mar = c(5.1, 4.1, 4.1, 5.1))
plot(final.ipdw, main = "IPDW")
plot(final.idw, main = "IDW")
plot(final.idw - final.ipdw,  main = "IDW versus IPDW")
```

We can compare interpolation errors quantitatively using the `errorGen` function. Figure 3 shows a plot of the validation dataset against the interpolated estimates at those points. The validation dataset enters into the function both as a sf object and as the underlying data values.

```{r}
measured.spdf <- data.frame(validate$salinity)

valid.ipdw <- errorGen(final.ipdw, validate["salinity"], measured.spdf)
valid.idw  <- errorGen(final.idw, validate["salinity"], measured.spdf)

par(mfrow = c(1, 2))
valid.ipdw <- errorGen(
  final.ipdw, validate["salinity"], measured.spdf, plot = TRUE, title = "IPDW"
)
valid.idw <- errorGen(
  final.idw, validate["salinity"], measured.spdf, plot = TRUE, title = "IDW"
)
```











`r knitr::knit_exit()`

```{r}


# ggplot() +
#   geom_sf(data = pols) +
#   geom_sf(data = pnts, aes(col = salinity)) +
#   geom_stars(data = st_as_stars(gridpol),  alpha = 0.5) +
#   scale_colour_gradient(low = "#F7FCF5", high = "#00441B") + 
#   theme_map

```









